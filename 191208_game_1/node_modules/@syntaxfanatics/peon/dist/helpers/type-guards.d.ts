import { AnyFunc } from './helper-types';
/**
 * @description
 * Determines if the property exists on the object
 * Type guard
 *
 * @param obj
 * @param propertyName
 */
export declare const hasProperty: <T extends Record<string, any>, P extends string | number | symbol>(obj: T, property: P) => obj is T & { [index in P]: any; };
/**
 * @description
 * Determines if the property exists on the object and is of type string
 * Type guard
 *
 * @param obj
 * @param propertyName
 */
export declare const hasStringProperty: <T extends Record<string, any>, P extends string | number | symbol>(obj: T, property: P) => obj is T & { [index in P]: string; };
/**
 * @description
 * Determines if the property exists on the object and is of type number
 * Type guard
 *
 * @param obj
 * @param propertyName
 */
export declare const hasNumberProperty: <T extends Record<string, any>, P extends string | number | symbol>(obj: T, property: P) => obj is T & { [index in P]: number; };
/**
 * @description
 * Determines if the property exists on the object and is of type array
 * Type guard
 *
 * @param obj
 * @param propertyName
 */
export declare const hasArrayProperty: <T extends Record<string, any>, P extends string | number | symbol>(obj: T, property: P) => obj is T & { [index in P]: any[]; };
/**
 * @description
 * Determines if the property exists on the object and is of type object
 * Type guard
 *
 * @param obj
 * @param propertyName
 */
export declare const hasObjectProperty: <T extends Record<string, any>, P extends string | number | symbol>(obj: T, property: P) => obj is T & { [index in P]: Record<string, any>; };
/**
 * @description
 * Determines if the property exists on the object and is of type function
 * Type guard
 *
 * @param obj
 * @param propertyName
 */
export declare const hasFunctionProperty: <T extends Record<string, any>, P extends string | number | symbol>(obj: T, property: P) => obj is T & { [index in P]: AnyFunc; };
/**
 * @description
 * Type guard for determining if a value is a string
 *
 * @param input
 */
export declare const isString: (input: unknown) => input is string;
/**
 * @description
 * Type guard for determining if a value is a number
 *
 * @param input
 */
export declare const isNumber: (input: unknown) => input is number;
/**
 * Stolen from apollo-tools (I like their way of checking :))
 *
 * @param value
 */
export declare function isNotNullOrUndefined<T>(value: T | null | undefined): value is T;
/**
 * @description
 * Is the entries value not null or undefined?
 *
 * @param entry
 */
export declare function entryNotNullOrUndefined<T, V>(entry: [T, V]): entry is [T, NonNullable<V>];
