"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Retry an async function if it fails
 *
 * @param options
 */
function retryEvery(options) {
    const { millisBetween, maxAttempts, log } = options;
    return function takeAsyncFn(tryMe) {
        let attempts = 0;
        return function trigger(...args) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            return __awaiter(this, void 0, void 0, function* () {
                // eslint-disable-next-line no-constant-condition
                while (true) {
                    try {
                        return yield tryMe(...args);
                    }
                    catch (error) {
                        if (attempts >= maxAttempts)
                            throw error;
                        if ((_a = log) === null || _a === void 0 ? void 0 : _a.includes('errors'))
                            (_d = (_b = console) === null || _b === void 0 ? void 0 : (_c = _b).error) === null || _d === void 0 ? void 0 : _d.call(_c, error);
                    }
                    attempts += 1;
                    if ((_e = log) === null || _e === void 0 ? void 0 : _e.includes('attempts'))
                        (_h = (_f = console) === null || _f === void 0 ? void 0 : (_g = _f).error) === null || _h === void 0 ? void 0 : _h.call(_g, `Async Function "${tryMe.name || 'anonymous function'}" failed... Retrying (${attempts} of ${maxAttempts})`);
                    yield new Promise((res) => setTimeout(res, millisBetween));
                }
            });
        };
    };
}
exports.retryEvery = retryEvery;
