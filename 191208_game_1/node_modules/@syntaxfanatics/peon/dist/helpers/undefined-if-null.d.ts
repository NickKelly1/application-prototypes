export declare const undefinedIfNull: <T>(v: T) => NonNullable<T> | undefined;
/**
 * @description
 * Resolve the promise to undefined if it were to be null
 *
 * @param v
 */
export declare const asyncUndefinedIfNull: <T>(v: Promise<T>) => Promise<NonNullable<T> | undefined>;
/**
 * @description
 * Return an object where any unll values are converted to undefined
 *
 * @param input
 */
export declare function objectUndefinedIfNull<T, K extends keyof T, R = {
    [P in K]: T[P] extends NonNullable<T[P]> ? T[P] : NonNullable<T[P]> | undefined;
}>(input: {
    [P in K]: T[P];
}): R;
