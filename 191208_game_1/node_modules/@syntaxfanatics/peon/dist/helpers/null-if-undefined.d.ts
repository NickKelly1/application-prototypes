export declare const nullIfUndefined: <T>(v: T) => NonNullable<T> | null;
/**
 * @description
 * Resolve the promise to null if it were to be undefined
 *
 * @param v
 */
export declare const asyncNullIfUndefined: <T>(v: Promise<T>) => Promise<NonNullable<T> | null>;
/**
 * @description
 * Return an object where any undefined values are converted to null
 *
 * @param input
 */
export declare function objectNullIfUndefined<T, K extends keyof T, R = {
    [P in K]: T[P] extends NonNullable<T[P]> ? T[P] : NonNullable<T[P]> | null;
}>(input: {
    [P in K]: T[P];
}): R;
