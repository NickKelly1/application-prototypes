/**
 * @description
 * Immutable, augmented version of the es6 Set class
 * es6 Set's mutable methods new sets instead of mutating
 */
export declare class ImmutableSet<T> implements Iterable<T> {
    protected readonly inner: Set<T>;
    /**
     * @description
     * Get the inner set
     */
    valueOf(): Set<T>;
    /**
     * @constructor
     *
     * @param values
     */
    constructor(...values: (Iterable<T> | null | undefined)[]);
    /**
     * @description
     * Get the size of the set
     */
    get size(): number;
    /**
     * @description
     * Get an iterator of the underlying set elements
     */
    [Symbol.iterator](): Generator<T, void, undefined>;
    /**
     * @description
     * Does the set have the value?
     *
     * @param value
     */
    has(value: T): boolean;
    /**
     * @description
     * (immutable) Add items onto the set
     *
     * @param items
     */
    add(...items: T[]): ImmutableSet<T>;
    /**
     * @description
     * Get the nth element of the set
     *
     * @note: will not always return T
     */
    nth(n: number): T;
    /**
     * @description
     * (immutable) Merge iterables onto the set
     *
     * @param iterables
     */
    concat(...iterables: Iterable<T>[]): ImmutableSet<T>;
    /**
     * @description
     * (immutable) Delete items from the set
     *
     * @param items
     */
    delete(...items: T[]): ImmutableSet<T>;
    /**
     * @description
     * Returns an iterable of [v,v] pairs for every value `v` in the set.
     */
    entries(): IterableIterator<[T, T]>;
    /**
     * @description
     * Despite its name, returns an iterable of the values in the set,
     */
    keys(): IterableIterator<T>;
    /**
     * @description
     * Returns an iterable of values in the set.
     */
    values(): IterableIterator<T>;
    /**
     * @description
     * Apply a function to each set element
     *
     * @param fn
     */
    forEach(fn: (arg: T) => any): void;
    /**
     * @description
     * Project the set into a new set
     *
     * @param projection
     */
    map<R>(projection: (arg: T) => R): ImmutableSet<R>;
    /**
     * @description
     * Filter the set into a new set
     *
     * @param predicate
     */
    filter(predicate: (arg: T) => boolean): ImmutableSet<T>;
}
