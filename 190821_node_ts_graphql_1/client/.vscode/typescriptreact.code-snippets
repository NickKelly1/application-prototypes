{
  // Place your client workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascriptreact,typescriptreact",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "React_Functional_Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reactfc",
    "body": [
      "import './${1:name}.scss';",
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { InferPropTypes } from '../../@types/infer-prop-types';",
      "",
      "const propTypes = {",
      "  //",
      "};",
      "const defaultProps = {",
      "  //",
      "};",
      "type PropTypes = InferPropTypes <typeof propTypes, typeof defaultProps> ;",
      "",
      "/**",
      " * @description",
      " * ${1:name}",
      " *",
      " * @param props",
      " */",
      "const ${1:name}: React.FC<PropTypes> = (props) => {",
      "  return (",
      "    <div>",
      "      TODO: ${1:name}",
      "    </div>",
      "  );",
      "};",
      "",
      "${1:name}.propTypes = propTypes;",
      "${1:name}.defaultProps = defaultProps;",
      "",
      "export default ${1:name};",
    ],
    "description": "React functional component",
  }
}