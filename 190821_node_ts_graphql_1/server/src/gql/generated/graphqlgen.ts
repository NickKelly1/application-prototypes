// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, Profile, Photo, Context } from "../Models";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    id: number;
  }

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {};

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ProfileIdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export type ProfileResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Profile | Promise<Profile>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Profile | Promise<Profile>;
      };

  export type PhotosResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Photo | null> | Promise<Array<Photo | null>>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Photo | null> | Promise<Array<Photo | null>>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    profileId:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };

    profile:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Profile | Promise<Profile>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Profile | Promise<Profile>;
        };

    photos:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Photo | null> | Promise<Array<Photo | null>>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Photo | null> | Promise<Array<Photo | null>>;
        };
  }
}

export namespace ProfileResolvers {
  export const defaultResolvers = {};

  export type IdResolver =
    | ((
        parent: Profile,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Profile,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type FavouriteColourResolver =
    | ((
        parent: Profile,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Profile,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UserResolver =
    | ((
        parent: Profile,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Profile,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    id:
      | ((
          parent: Profile,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Profile,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    favouriteColour:
      | ((
          parent: Profile,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Profile,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    user:
      | ((
          parent: Profile,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Profile,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };
  }
}

export namespace PhotoResolvers {
  export const defaultResolvers = {};

  export type UrlResolver =
    | ((
        parent: Photo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Photo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UserIdResolver =
    | ((
        parent: Photo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Photo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type UserResolver =
    | ((
        parent: Photo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Photo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    url:
      | ((
          parent: Photo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Photo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    userId:
      | ((
          parent: Photo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Photo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    user:
      | ((
          parent: Photo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Photo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreateUserInput {
    email: string;
    profile?: ProfileInput | null;
    photos?: CreateUserInputPhoto[] | null;
  }
  export interface UpdateUserInput {
    email?: string | null;
    profile?: ProfileInput | null;
  }
  export interface ProfileInput {
    favouriteColour: string;
  }
  export interface CreateUserInputPhoto {
    url: string;
  }

  export interface ArgsCreateUser {
    user: CreateUserInput;
  }

  export interface ArgsUpdateUser {
    id: number;
    user: UpdateUserInput;
  }

  export interface ArgsDeleteUser {
    id: number;
  }

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type UpdateUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type DeleteUserResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export interface Type {
    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    updateUser:
      | ((
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    deleteUser:
      | ((
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Profile: ProfileResolvers.Type;
  Photo: PhotoResolvers.Type;
  Mutation: MutationResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
